//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4BD909B27BDEDD36FAE4C72784314C86))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets4BD909B27BDEDD36FAE4C72784314C86 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views
        /// </Summary>
        public ViewsForBaseEntitySets4BD909B27BDEDD36FAE4C72784314C86()
        {
            this.EdmEntityContainerName = "KiggEntityContainer";
            this.StoreEntityContainerName = "KiggStorageEntityContainer";
            this.HashOverMappingClosure = "caf2e5fd77cb1c3eb05bf4d3867639d7";
            this.HashOverAllExtentViews = "62be8426a77ff0968b5230eccb252af8";
            this.ViewCount = 36;
        }
        
        // The method returns the view for the index given.
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                // return view for KiggStorageEntityContainer.Category
                return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.Category", @"
    SELECT VALUE -- Constructing Category
        [Kigg.EF.DomainObjects.Store].Category(T1.Category_Id, T1.Category_UniqueName, T1.Category_Name, T1.Category_CreatedAt)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.UniqueName AS Category_UniqueName, 
            T.Name AS Category_Name, 
            T.CreatedAt AS Category_CreatedAt, 
            True AS _from0
        FROM KiggEntityContainer.Category AS T
    ) AS T1");
            }
            else
            {
                if ((index == 1))
                {
                    // return view for KiggStorageEntityContainer.Story
                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.Story", "\r\n    SELECT VALUE -- Constructing Story\r\n        [Kigg.EF.DomainObjects.Store].S" +
                            "tory(T4.Story_Id, T4.Story_UniqueName, T4.Story_Title, T4.Story_HtmlDescription," +
                            " T4.Story_TextDescription, T4.Story_Url, T4.Story_UrlHash, T4.Story_CategoryId, " +
                            "T4.Story_UserId, T4.Story_IPAddress, T4.Story_CreatedAt, T4.Story_LastActivityAt" +
                            ", T4.Story_ApprovedAt, T4.Story_PublishedAt, T4.Story_Rank, T4.Story_LastProcess" +
                            "edAt)\r\n    FROM (\r\n        SELECT T1.Story_Id, T3.Story_UniqueName, T3.Story_Tit" +
                            "le, T3.Story_HtmlDescription, T3.Story_TextDescription, T3.Story_Url, T3.Story_U" +
                            "rlHash, T2.Story_CategoryId, T1.Story_UserId, T3.Story_IPAddress, T3.Story_Creat" +
                            "edAt, T3.Story_LastActivityAt, T3.Story_ApprovedAt, T3.Story_PublishedAt, T3.Sto" +
                            "ry_Rank, T3.Story_LastProcessedAt, T3._from0, T2._from1, T1._from2\r\n        FROM" +
                            "  (\r\n            SELECT \r\n                Key(T.Story).Id AS Story_Id, \r\n       " +
                            "         Key(T.User).Id AS Story_UserId, \r\n                True AS _from2\r\n     " +
                            "       FROM KiggEntityContainer.FK_Story_User AS T) AS T1\r\n            INNER JOI" +
                            "N (\r\n            SELECT \r\n                Key(T.Story).Id AS Story_Id, \r\n       " +
                            "         Key(T.Category).Id AS Story_CategoryId, \r\n                True AS _from" +
                            "1\r\n            FROM KiggEntityContainer.FK_Story_Category AS T) AS T2\r\n         " +
                            "   ON T1.Story_Id = T2.Story_Id\r\n            INNER JOIN (\r\n            SELECT \r\n" +
                            "                T.Id AS Story_Id, \r\n                T.UniqueName AS Story_Unique" +
                            "Name, \r\n                T.Title AS Story_Title, \r\n                T.HtmlDescript" +
                            "ion AS Story_HtmlDescription, \r\n                T.TextDescription AS Story_TextD" +
                            "escription, \r\n                T.Url AS Story_Url, \r\n                T.UrlHash AS" +
                            " Story_UrlHash, \r\n                T.IpAddress AS Story_IPAddress, \r\n            " +
                            "    T.CreatedAt AS Story_CreatedAt, \r\n                T.LastActivityAt AS Story_" +
                            "LastActivityAt, \r\n                T.ApprovedAt AS Story_ApprovedAt, \r\n          " +
                            "      T.PublishedAt AS Story_PublishedAt, \r\n                T.Rank AS Story_Rank" +
                            ", \r\n                T.LastProcessedAt AS Story_LastProcessedAt, \r\n              " +
                            "  True AS _from0\r\n            FROM KiggEntityContainer.Story AS T) AS T3\r\n      " +
                            "      ON T1.Story_Id = T3.Story_Id\r\n    ) AS T4");
                }
                else
                {
                    if ((index == 2))
                    {
                        // return view for KiggStorageEntityContainer.StoryComment
                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.StoryComment", "\r\n    SELECT VALUE -- Constructing StoryComment\r\n        [Kigg.EF.DomainObjects.S" +
                                "tore].StoryComment(T4.StoryComment_Id, T4.StoryComment_HtmlBody, T4.StoryComment" +
                                "_TextBody, T4.StoryComment_CreatedAt, T4.StoryComment_StoryId, T4.StoryComment_U" +
                                "serId, T4.StoryComment_IPAddress, T4.StoryComment_IsOffended)\r\n    FROM (\r\n     " +
                                "   SELECT T1.StoryComment_Id, T3.StoryComment_HtmlBody, T3.StoryComment_TextBody" +
                                ", T3.StoryComment_CreatedAt, T2.StoryComment_StoryId, T1.StoryComment_UserId, T3" +
                                ".StoryComment_IPAddress, T3.StoryComment_IsOffended, T3._from0, T2._from1, T1._f" +
                                "rom2\r\n        FROM  (\r\n            SELECT \r\n                Key(T.StoryComment)." +
                                "Id AS StoryComment_Id, \r\n                Key(T.User).Id AS StoryComment_UserId, " +
                                "\r\n                True AS _from2\r\n            FROM KiggEntityContainer.FK_StoryC" +
                                "omment_User AS T) AS T1\r\n            INNER JOIN (\r\n            SELECT \r\n        " +
                                "        Key(T.StoryComment).Id AS StoryComment_Id, \r\n                Key(T.Story" +
                                ").Id AS StoryComment_StoryId, \r\n                True AS _from1\r\n            FROM" +
                                " KiggEntityContainer.FK_StoryComment_Story AS T) AS T2\r\n            ON T1.StoryC" +
                                "omment_Id = T2.StoryComment_Id\r\n            INNER JOIN (\r\n            SELECT \r\n " +
                                "               T.Id AS StoryComment_Id, \r\n                T.HtmlBody AS StoryCom" +
                                "ment_HtmlBody, \r\n                T.TextBody AS StoryComment_TextBody, \r\n        " +
                                "        T.CreatedAt AS StoryComment_CreatedAt, \r\n                T.IpAddress AS " +
                                "StoryComment_IPAddress, \r\n                T.IsOffended AS StoryComment_IsOffende" +
                                "d, \r\n                True AS _from0\r\n            FROM KiggEntityContainer.StoryC" +
                                "omment AS T) AS T3\r\n            ON T1.StoryComment_Id = T3.StoryComment_Id\r\n    " +
                                ") AS T4");
                    }
                    else
                    {
                        if ((index == 3))
                        {
                            // return view for KiggStorageEntityContainer.StoryMarkAsSpam
                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.StoryMarkAsSpam", @"
    SELECT VALUE -- Constructing StoryMarkAsSpam
        [Kigg.EF.DomainObjects.Store].StoryMarkAsSpam(T1.StoryMarkAsSpam_StoryId, T1.StoryMarkAsSpam_UserId, T1.StoryMarkAsSpam_IPAddress, T1.StoryMarkAsSpam_Timestamp)
    FROM (
        SELECT 
            T.StoryId AS StoryMarkAsSpam_StoryId, 
            T.UserId AS StoryMarkAsSpam_UserId, 
            T.IpAddress AS StoryMarkAsSpam_IPAddress, 
            T.Timestamp AS StoryMarkAsSpam_Timestamp, 
            True AS _from0
        FROM KiggEntityContainer.StoryMarkAsSpam AS T
    ) AS T1");
                        }
                        else
                        {
                            if ((index == 4))
                            {
                                // return view for KiggStorageEntityContainer.StoryView
                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.StoryView", @"
    SELECT VALUE -- Constructing StoryView
        [Kigg.EF.DomainObjects.Store].StoryView(T3.StoryView_Id, T3.StoryView_StoryId, T3.StoryView_Timestamp, T3.StoryView_IPAddress)
    FROM (
        SELECT T1.StoryView_Id, T1.StoryView_StoryId, T2.StoryView_Timestamp, T2.StoryView_IPAddress, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.StoryView).Id AS StoryView_Id, 
                Key(T.Story).Id AS StoryView_StoryId, 
                True AS _from1
            FROM KiggEntityContainer.FK_StoryView_Story AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS StoryView_Id, 
                T.Timestamp AS StoryView_Timestamp, 
                T.IpAddress AS StoryView_IPAddress, 
                True AS _from0
            FROM KiggEntityContainer.StoryView AS T) AS T2
            ON T1.StoryView_Id = T2.StoryView_Id
    ) AS T3");
                            }
                            else
                            {
                                if ((index == 5))
                                {
                                    // return view for KiggStorageEntityContainer.StoryVote
                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.StoryVote", @"
    SELECT VALUE -- Constructing StoryVote
        [Kigg.EF.DomainObjects.Store].StoryVote(T1.StoryVote_StoryId, T1.StoryVote_UserId, T1.StoryVote_IPAddress, T1.StoryVote_Timestamp)
    FROM (
        SELECT 
            T.StoryId AS StoryVote_StoryId, 
            T.UserId AS StoryVote_UserId, 
            T.IpAddress AS StoryVote_IPAddress, 
            T.Timestamp AS StoryVote_Timestamp, 
            True AS _from0
        FROM KiggEntityContainer.StoryVote AS T
    ) AS T1");
                                }
                                else
                                {
                                    if ((index == 6))
                                    {
                                        // return view for KiggStorageEntityContainer.Tag
                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.Tag", @"
    SELECT VALUE -- Constructing Tag
        [Kigg.EF.DomainObjects.Store].Tag(T1.Tag_Id, T1.Tag_UniqueName, T1.Tag_Name, T1.Tag_CreatedAt)
    FROM (
        SELECT 
            T.Id AS Tag_Id, 
            T.UniqueName AS Tag_UniqueName, 
            T.Name AS Tag_Name, 
            T.CreatedAt AS Tag_CreatedAt, 
            True AS _from0
        FROM KiggEntityContainer.Tag AS T
    ) AS T1");
                                    }
                                    else
                                    {
                                        if ((index == 7))
                                        {
                                            // return view for KiggStorageEntityContainer.User
                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.User", @"
    SELECT VALUE -- Constructing User
        [Kigg.EF.DomainObjects.Store].User(T1.User_Id, T1.User_UserName, T1.User_Password, T1.User_Email, T1.User_IsActive, T1.User_IsLockedOut, T1.User_Role, T1.User_LastActivityAt, T1.User_CreatedAt)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.UserName AS User_UserName, 
            T.Password AS User_Password, 
            T.Email AS User_Email, 
            T.IsActive AS User_IsActive, 
            T.IsLockedOut AS User_IsLockedOut, 
            T.AssignedRole AS User_Role, 
            T.LastActivityAt AS User_LastActivityAt, 
            T.CreatedAt AS User_CreatedAt, 
            True AS _from0
        FROM KiggEntityContainer.UserDataSource AS T
    ) AS T1");
                                        }
                                        else
                                        {
                                            if ((index == 8))
                                            {
                                                // return view for KiggStorageEntityContainer.UserScore
                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.UserScore", @"
    SELECT VALUE -- Constructing UserScore
        [Kigg.EF.DomainObjects.Store].UserScore(T3.UserScore_Id, T3.UserScore_UserId, T3.UserScore_Timestamp, T3.UserScore_ActionType, T3.UserScore_Score)
    FROM (
        SELECT T1.UserScore_Id, T1.UserScore_UserId, T2.UserScore_Timestamp, T2.UserScore_ActionType, T2.UserScore_Score, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.UserScore).Id AS UserScore_Id, 
                Key(T.User).Id AS UserScore_UserId, 
                True AS _from1
            FROM KiggEntityContainer.FK_UserScore_User AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS UserScore_Id, 
                T.Timestamp AS UserScore_Timestamp, 
                T.Action AS UserScore_ActionType, 
                T.Score AS UserScore_Score, 
                True AS _from0
            FROM KiggEntityContainer.UserScore AS T) AS T2
            ON T1.UserScore_Id = T2.UserScore_Id
    ) AS T3");
                                            }
                                            else
                                            {
                                                if ((index == 9))
                                                {
                                                    // return view for KiggStorageEntityContainer.CommentSubscribtion
                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.CommentSubscribtion", @"
    SELECT VALUE -- Constructing CommentSubscribtion
        [Kigg.EF.DomainObjects.Store].CommentSubscribtion(T1.CommentSubscribtion_StoryId, T1.CommentSubscribtion_UserId)
    FROM (
        SELECT 
            Key(T.Story).Id AS CommentSubscribtion_StoryId, 
            Key(T.User).Id AS CommentSubscribtion_UserId, 
            True AS _from0
        FROM KiggEntityContainer.CommentSubscribtion AS T
    ) AS T1");
                                                }
                                                else
                                                {
                                                    if ((index == 10))
                                                    {
                                                        // return view for KiggStorageEntityContainer.StoryTag
                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.StoryTag", @"
    SELECT VALUE -- Constructing StoryTag
        [Kigg.EF.DomainObjects.Store].StoryTag(T1.StoryTag_StoryId, T1.StoryTag_TagId)
    FROM (
        SELECT 
            Key(T.Story).Id AS StoryTag_StoryId, 
            Key(T.Tag).Id AS StoryTag_TagId, 
            True AS _from0
        FROM KiggEntityContainer.StoryTag AS T
    ) AS T1");
                                                    }
                                                    else
                                                    {
                                                        if ((index == 11))
                                                        {
                                                            // return view for KiggStorageEntityContainer.UserTag
                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.UserTag", @"
    SELECT VALUE -- Constructing UserTag
        [Kigg.EF.DomainObjects.Store].UserTag(T1.UserTag_UserId, T1.UserTag_TagId)
    FROM (
        SELECT 
            Key(T.User).Id AS UserTag_UserId, 
            Key(T.Tag).Id AS UserTag_TagId, 
            True AS _from0
        FROM KiggEntityContainer.UserTag AS T
    ) AS T1");
                                                        }
                                                        else
                                                        {
                                                            if ((index == 12))
                                                            {
                                                                // return view for KiggEntityContainer.Category
                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.Category", @"
    SELECT VALUE -- Constructing Category
        [Kigg.EF.DomainObjects].Category(T1.Category_Id, T1.Category_UniqueName, T1.Category_Name, T1.Category_CreatedAt)
    FROM (
        SELECT 
            T.Id AS Category_Id, 
            T.UniqueName AS Category_UniqueName, 
            T.Name AS Category_Name, 
            T.CreatedAt AS Category_CreatedAt, 
            True AS _from0
        FROM KiggStorageEntityContainer.Category AS T
    ) AS T1");
                                                            }
                                                            else
                                                            {
                                                                if ((index == 13))
                                                                {
                                                                    // return view for KiggEntityContainer.Story
                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.Story", "\r\n    SELECT VALUE -- Constructing Story\r\n        [Kigg.EF.DomainObjects].Story(T" +
                                                                            "1.Story_Id, T1.Story_UniqueName, T1.Story_Title, T1.Story_HtmlDescription, T1.St" +
                                                                            "ory_TextDescription, T1.Story_Url, T1.Story_UrlHash, T1.Story_IpAddress, T1.Stor" +
                                                                            "y_CreatedAt, T1.Story_LastActivityAt, T1.Story_ApprovedAt, T1.Story_PublishedAt," +
                                                                            " T1.Story_Rank, T1.Story_LastProcessedAt) WITH \r\n        RELATIONSHIP(CREATEREF(" +
                                                                            "KiggEntityContainer.Category, ROW(T1.[FK_Story_Category.Category.Id]),[Kigg.EF.D" +
                                                                            "omainObjects].Category),[Kigg.EF.DomainObjects].FK_Story_Category,Story,Category" +
                                                                            ") \r\n        RELATIONSHIP(CREATEREF(KiggEntityContainer.UserDataSource, ROW(T1.[F" +
                                                                            "K_Story_User.User.Id]),[Kigg.EF.DomainObjects].User),[Kigg.EF.DomainObjects].FK_" +
                                                                            "Story_User,Story,User) \r\n    FROM (\r\n        SELECT \r\n            T.Id AS Story_" +
                                                                            "Id, \r\n            T.UniqueName AS Story_UniqueName, \r\n            T.Title AS Sto" +
                                                                            "ry_Title, \r\n            T.HtmlDescription AS Story_HtmlDescription, \r\n          " +
                                                                            "  T.TextDescription AS Story_TextDescription, \r\n            T.Url AS Story_Url, " +
                                                                            "\r\n            T.UrlHash AS Story_UrlHash, \r\n            T.IPAddress AS Story_IpA" +
                                                                            "ddress, \r\n            T.CreatedAt AS Story_CreatedAt, \r\n            T.LastActivi" +
                                                                            "tyAt AS Story_LastActivityAt, \r\n            T.ApprovedAt AS Story_ApprovedAt, \r\n" +
                                                                            "            T.PublishedAt AS Story_PublishedAt, \r\n            T.Rank AS Story_Ra" +
                                                                            "nk, \r\n            T.LastProcessedAt AS Story_LastProcessedAt, \r\n            True" +
                                                                            " AS _from0, \r\n            T.CategoryId AS [FK_Story_Category.Category.Id], \r\n   " +
                                                                            "         T.UserId AS [FK_Story_User.User.Id]\r\n        FROM KiggStorageEntityCont" +
                                                                            "ainer.Story AS T\r\n    ) AS T1");
                                                                }
                                                                else
                                                                {
                                                                    if ((index == 14))
                                                                    {
                                                                        // return view for KiggEntityContainer.StoryComment
                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.StoryComment", @"
    SELECT VALUE -- Constructing StoryComment
        [Kigg.EF.DomainObjects].StoryComment(T1.StoryComment_Id, T1.StoryComment_HtmlBody, T1.StoryComment_TextBody, T1.StoryComment_CreatedAt, T1.StoryComment_IpAddress, T1.StoryComment_IsOffended) WITH 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.Story, ROW(T1.[FK_StoryComment_Story.Story.Id]),[Kigg.EF.DomainObjects].Story),[Kigg.EF.DomainObjects].FK_StoryComment_Story,StoryComment,Story) 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.UserDataSource, ROW(T1.[FK_StoryComment_User.User.Id]),[Kigg.EF.DomainObjects].User),[Kigg.EF.DomainObjects].FK_StoryComment_User,StoryComment,User) 
    FROM (
        SELECT 
            T.Id AS StoryComment_Id, 
            T.HtmlBody AS StoryComment_HtmlBody, 
            T.TextBody AS StoryComment_TextBody, 
            T.CreatedAt AS StoryComment_CreatedAt, 
            T.IPAddress AS StoryComment_IpAddress, 
            T.IsOffended AS StoryComment_IsOffended, 
            True AS _from0, 
            T.StoryId AS [FK_StoryComment_Story.Story.Id], 
            T.UserId AS [FK_StoryComment_User.User.Id]
        FROM KiggStorageEntityContainer.StoryComment AS T
    ) AS T1");
                                                                    }
                                                                    else
                                                                    {
                                                                        if ((index == 15))
                                                                        {
                                                                            // return view for KiggEntityContainer.StoryMarkAsSpam
                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.StoryMarkAsSpam", @"
    SELECT VALUE -- Constructing StoryMarkAsSpam
        [Kigg.EF.DomainObjects].StoryMarkAsSpam(T1.StoryMarkAsSpam_StoryId, T1.StoryMarkAsSpam_UserId, T1.StoryMarkAsSpam_IpAddress, T1.StoryMarkAsSpam_Timestamp) WITH 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.Story, ROW(T1.[FK_StoryMarkAsSpam_Story.Story.Id]),[Kigg.EF.DomainObjects].Story),[Kigg.EF.DomainObjects].FK_StoryMarkAsSpam_Story,StoryMarkAsSpam,Story) 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.UserDataSource, ROW(T1.[FK_StoryMarkAsSpam_User.User.Id]),[Kigg.EF.DomainObjects].User),[Kigg.EF.DomainObjects].FK_StoryMarkAsSpam_User,StoryMarkAsSpam,User) 
    FROM (
        SELECT 
            T.StoryId AS StoryMarkAsSpam_StoryId, 
            T.UserId AS StoryMarkAsSpam_UserId, 
            T.IPAddress AS StoryMarkAsSpam_IpAddress, 
            T.Timestamp AS StoryMarkAsSpam_Timestamp, 
            True AS _from0, 
            T.StoryId AS [FK_StoryMarkAsSpam_Story.Story.Id], 
            T.UserId AS [FK_StoryMarkAsSpam_User.User.Id]
        FROM KiggStorageEntityContainer.StoryMarkAsSpam AS T
    ) AS T1");
                                                                        }
                                                                        else
                                                                        {
                                                                            if ((index == 16))
                                                                            {
                                                                                // return view for KiggEntityContainer.StoryView
                                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.StoryView", @"
    SELECT VALUE -- Constructing StoryView
        [Kigg.EF.DomainObjects].StoryView(T1.StoryView_Id, T1.StoryView_Timestamp, T1.StoryView_IpAddress) WITH 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.Story, ROW(T1.[FK_StoryView_Story.Story.Id]),[Kigg.EF.DomainObjects].Story),[Kigg.EF.DomainObjects].FK_StoryView_Story,StoryView,Story) 
    FROM (
        SELECT 
            T.Id AS StoryView_Id, 
            T.Timestamp AS StoryView_Timestamp, 
            T.IPAddress AS StoryView_IpAddress, 
            True AS _from0, 
            T.StoryId AS [FK_StoryView_Story.Story.Id]
        FROM KiggStorageEntityContainer.StoryView AS T
    ) AS T1");
                                                                            }
                                                                            else
                                                                            {
                                                                                if ((index == 17))
                                                                                {
                                                                                    // return view for KiggEntityContainer.StoryVote
                                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.StoryVote", @"
    SELECT VALUE -- Constructing StoryVote
        [Kigg.EF.DomainObjects].StoryVote(T1.StoryVote_StoryId, T1.StoryVote_UserId, T1.StoryVote_IpAddress, T1.StoryVote_Timestamp) WITH 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.Story, ROW(T1.[FK_StoryVote_Story.Story.Id]),[Kigg.EF.DomainObjects].Story),[Kigg.EF.DomainObjects].FK_StoryVote_Story,StoryVote,Story) 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.UserDataSource, ROW(T1.[FK_StoryVote_User.User.Id]),[Kigg.EF.DomainObjects].User),[Kigg.EF.DomainObjects].FK_StoryVote_User,StoryVote,User) 
    FROM (
        SELECT 
            T.StoryId AS StoryVote_StoryId, 
            T.UserId AS StoryVote_UserId, 
            T.IPAddress AS StoryVote_IpAddress, 
            T.Timestamp AS StoryVote_Timestamp, 
            True AS _from0, 
            T.StoryId AS [FK_StoryVote_Story.Story.Id], 
            T.UserId AS [FK_StoryVote_User.User.Id]
        FROM KiggStorageEntityContainer.StoryVote AS T
    ) AS T1");
                                                                                }
                                                                                else
                                                                                {
                                                                                    if ((index == 18))
                                                                                    {
                                                                                        // return view for KiggEntityContainer.Tag
                                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.Tag", @"
    SELECT VALUE -- Constructing Tag
        [Kigg.EF.DomainObjects].Tag(T1.Tag_Id, T1.Tag_UniqueName, T1.Tag_Name, T1.Tag_CreatedAt)
    FROM (
        SELECT 
            T.Id AS Tag_Id, 
            T.UniqueName AS Tag_UniqueName, 
            T.Name AS Tag_Name, 
            T.CreatedAt AS Tag_CreatedAt, 
            True AS _from0
        FROM KiggStorageEntityContainer.Tag AS T
    ) AS T1");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if ((index == 19))
                                                                                        {
                                                                                            // return view for KiggEntityContainer.UserDataSource
                                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.UserDataSource", @"
    SELECT VALUE -- Constructing UserDataSource
        [Kigg.EF.DomainObjects].User(T1.User_Id, T1.User_UserName, T1.User_Password, T1.User_Email, T1.User_IsActive, T1.User_IsLockedOut, T1.User_AssignedRole, T1.User_LastActivityAt, T1.User_CreatedAt)
    FROM (
        SELECT 
            T.Id AS User_Id, 
            T.UserName AS User_UserName, 
            T.Password AS User_Password, 
            T.Email AS User_Email, 
            T.IsActive AS User_IsActive, 
            T.IsLockedOut AS User_IsLockedOut, 
            T.Role AS User_AssignedRole, 
            T.LastActivityAt AS User_LastActivityAt, 
            T.CreatedAt AS User_CreatedAt, 
            True AS _from0
        FROM KiggStorageEntityContainer.User AS T
    ) AS T1");
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if ((index == 20))
                                                                                            {
                                                                                                // return view for KiggEntityContainer.UserScore
                                                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.UserScore", @"
    SELECT VALUE -- Constructing UserScore
        [Kigg.EF.DomainObjects].UserScore(T1.UserScore_Id, T1.UserScore_Timestamp, T1.UserScore_Action, T1.UserScore_Score) WITH 
        RELATIONSHIP(CREATEREF(KiggEntityContainer.UserDataSource, ROW(T1.[FK_UserScore_User.User.Id]),[Kigg.EF.DomainObjects].User),[Kigg.EF.DomainObjects].FK_UserScore_User,UserScore,User) 
    FROM (
        SELECT 
            T.Id AS UserScore_Id, 
            T.Timestamp AS UserScore_Timestamp, 
            T.ActionType AS UserScore_Action, 
            T.Score AS UserScore_Score, 
            True AS _from0, 
            T.UserId AS [FK_UserScore_User.User.Id]
        FROM KiggStorageEntityContainer.UserScore AS T
    ) AS T1");
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                if ((index == 21))
                                                                                                {
                                                                                                    // return view for KiggEntityContainer.FK_Story_Category
                                                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_Story_Category", @"
    SELECT VALUE -- Constructing FK_Story_Category
        [Kigg.EF.DomainObjects].FK_Story_Category(T3.[FK_Story_Category.Category], T3.[FK_Story_Category.Story])
    FROM (
        SELECT -- Constructing Category
            CreateRef(KiggEntityContainer.Category, row(T2.[FK_Story_Category.Category.Id]),[Kigg.EF.DomainObjects].Category) AS [FK_Story_Category.Category], 
            T2.[FK_Story_Category.Story]
        FROM (
            SELECT -- Constructing Story
                CreateRef(KiggEntityContainer.Story, row(T1.[FK_Story_Category.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_Story_Category.Story], 
                T1.[FK_Story_Category.Category.Id]
            FROM (
                SELECT 
                    T.CategoryId AS [FK_Story_Category.Category.Id], 
                    T.Id AS [FK_Story_Category.Story.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.Story AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    if ((index == 22))
                                                                                                    {
                                                                                                        // return view for KiggEntityContainer.FK_Story_User
                                                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_Story_User", @"
    SELECT VALUE -- Constructing FK_Story_User
        [Kigg.EF.DomainObjects].FK_Story_User(T3.[FK_Story_User.User], T3.[FK_Story_User.Story])
    FROM (
        SELECT -- Constructing User
            CreateRef(KiggEntityContainer.UserDataSource, row(T2.[FK_Story_User.User.Id]),[Kigg.EF.DomainObjects].User) AS [FK_Story_User.User], 
            T2.[FK_Story_User.Story]
        FROM (
            SELECT -- Constructing Story
                CreateRef(KiggEntityContainer.Story, row(T1.[FK_Story_User.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_Story_User.Story], 
                T1.[FK_Story_User.User.Id]
            FROM (
                SELECT 
                    T.UserId AS [FK_Story_User.User.Id], 
                    T.Id AS [FK_Story_User.Story.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.Story AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        if ((index == 23))
                                                                                                        {
                                                                                                            // return view for KiggEntityContainer.FK_StoryComment_Story
                                                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryComment_Story", @"
    SELECT VALUE -- Constructing FK_StoryComment_Story
        [Kigg.EF.DomainObjects].FK_StoryComment_Story(T3.[FK_StoryComment_Story.Story], T3.[FK_StoryComment_Story.StoryComment])
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.[FK_StoryComment_Story.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_StoryComment_Story.Story], 
            T2.[FK_StoryComment_Story.StoryComment]
        FROM (
            SELECT -- Constructing StoryComment
                CreateRef(KiggEntityContainer.StoryComment, row(T1.[FK_StoryComment_Story.StoryComment.Id]),[Kigg.EF.DomainObjects].StoryComment) AS [FK_StoryComment_Story.StoryComment], 
                T1.[FK_StoryComment_Story.Story.Id]
            FROM (
                SELECT 
                    T.StoryId AS [FK_StoryComment_Story.Story.Id], 
                    T.Id AS [FK_StoryComment_Story.StoryComment.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryComment AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            if ((index == 24))
                                                                                                            {
                                                                                                                // return view for KiggEntityContainer.FK_StoryMarkAsSpam_Story
                                                                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryMarkAsSpam_Story", @"
    SELECT VALUE -- Constructing FK_StoryMarkAsSpam_Story
        [Kigg.EF.DomainObjects].FK_StoryMarkAsSpam_Story(T3.[FK_StoryMarkAsSpam_Story.Story], T3.[FK_StoryMarkAsSpam_Story.StoryMarkAsSpam])
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.[FK_StoryMarkAsSpam_Story.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_StoryMarkAsSpam_Story.Story], 
            T2.[FK_StoryMarkAsSpam_Story.StoryMarkAsSpam]
        FROM (
            SELECT -- Constructing StoryMarkAsSpam
                CreateRef(KiggEntityContainer.StoryMarkAsSpam, row(T1.[FK_StoryMarkAsSpam_Story.StoryMarkAsSpam.StoryId], T1.[FK_StoryMarkAsSpam_Story.StoryMarkAsSpam.UserId]),[Kigg.EF.DomainObjects].StoryMarkAsSpam) AS [FK_StoryMarkAsSpam_Story.StoryMarkAsSpam], 
                T1.[FK_StoryMarkAsSpam_Story.Story.Id]
            FROM (
                SELECT 
                    T.StoryId AS [FK_StoryMarkAsSpam_Story.Story.Id], 
                    T.StoryId AS [FK_StoryMarkAsSpam_Story.StoryMarkAsSpam.StoryId], 
                    T.UserId AS [FK_StoryMarkAsSpam_Story.StoryMarkAsSpam.UserId], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryMarkAsSpam AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                            }
                                                                                                            else
                                                                                                            {
                                                                                                                if ((index == 25))
                                                                                                                {
                                                                                                                    // return view for KiggEntityContainer.FK_StoryView_Story
                                                                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryView_Story", @"
    SELECT VALUE -- Constructing FK_StoryView_Story
        [Kigg.EF.DomainObjects].FK_StoryView_Story(T3.[FK_StoryView_Story.Story], T3.[FK_StoryView_Story.StoryView])
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.[FK_StoryView_Story.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_StoryView_Story.Story], 
            T2.[FK_StoryView_Story.StoryView]
        FROM (
            SELECT -- Constructing StoryView
                CreateRef(KiggEntityContainer.StoryView, row(T1.[FK_StoryView_Story.StoryView.Id]),[Kigg.EF.DomainObjects].StoryView) AS [FK_StoryView_Story.StoryView], 
                T1.[FK_StoryView_Story.Story.Id]
            FROM (
                SELECT 
                    T.StoryId AS [FK_StoryView_Story.Story.Id], 
                    T.Id AS [FK_StoryView_Story.StoryView.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryView AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                }
                                                                                                                else
                                                                                                                {
                                                                                                                    if ((index == 26))
                                                                                                                    {
                                                                                                                        // return view for KiggEntityContainer.FK_StoryVote_Story
                                                                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryVote_Story", @"
    SELECT VALUE -- Constructing FK_StoryVote_Story
        [Kigg.EF.DomainObjects].FK_StoryVote_Story(T3.[FK_StoryVote_Story.Story], T3.[FK_StoryVote_Story.StoryVote])
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.[FK_StoryVote_Story.Story.Id]),[Kigg.EF.DomainObjects].Story) AS [FK_StoryVote_Story.Story], 
            T2.[FK_StoryVote_Story.StoryVote]
        FROM (
            SELECT -- Constructing StoryVote
                CreateRef(KiggEntityContainer.StoryVote, row(T1.[FK_StoryVote_Story.StoryVote.StoryId], T1.[FK_StoryVote_Story.StoryVote.UserId]),[Kigg.EF.DomainObjects].StoryVote) AS [FK_StoryVote_Story.StoryVote], 
                T1.[FK_StoryVote_Story.Story.Id]
            FROM (
                SELECT 
                    T.StoryId AS [FK_StoryVote_Story.Story.Id], 
                    T.StoryId AS [FK_StoryVote_Story.StoryVote.StoryId], 
                    T.UserId AS [FK_StoryVote_Story.StoryVote.UserId], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryVote AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                    }
                                                                                                                    else
                                                                                                                    {
                                                                                                                        if ((index == 27))
                                                                                                                        {
                                                                                                                            // return view for KiggEntityContainer.FK_StoryComment_User
                                                                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryComment_User", @"
    SELECT VALUE -- Constructing FK_StoryComment_User
        [Kigg.EF.DomainObjects].FK_StoryComment_User(T3.[FK_StoryComment_User.User], T3.[FK_StoryComment_User.StoryComment])
    FROM (
        SELECT -- Constructing User
            CreateRef(KiggEntityContainer.UserDataSource, row(T2.[FK_StoryComment_User.User.Id]),[Kigg.EF.DomainObjects].User) AS [FK_StoryComment_User.User], 
            T2.[FK_StoryComment_User.StoryComment]
        FROM (
            SELECT -- Constructing StoryComment
                CreateRef(KiggEntityContainer.StoryComment, row(T1.[FK_StoryComment_User.StoryComment.Id]),[Kigg.EF.DomainObjects].StoryComment) AS [FK_StoryComment_User.StoryComment], 
                T1.[FK_StoryComment_User.User.Id]
            FROM (
                SELECT 
                    T.UserId AS [FK_StoryComment_User.User.Id], 
                    T.Id AS [FK_StoryComment_User.StoryComment.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryComment AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                        }
                                                                                                                        else
                                                                                                                        {
                                                                                                                            if ((index == 28))
                                                                                                                            {
                                                                                                                                // return view for KiggEntityContainer.FK_StoryMarkAsSpam_User
                                                                                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryMarkAsSpam_User", @"
    SELECT VALUE -- Constructing FK_StoryMarkAsSpam_User
        [Kigg.EF.DomainObjects].FK_StoryMarkAsSpam_User(T3.[FK_StoryMarkAsSpam_User.User], T3.[FK_StoryMarkAsSpam_User.StoryMarkAsSpam])
    FROM (
        SELECT -- Constructing User
            CreateRef(KiggEntityContainer.UserDataSource, row(T2.[FK_StoryMarkAsSpam_User.User.Id]),[Kigg.EF.DomainObjects].User) AS [FK_StoryMarkAsSpam_User.User], 
            T2.[FK_StoryMarkAsSpam_User.StoryMarkAsSpam]
        FROM (
            SELECT -- Constructing StoryMarkAsSpam
                CreateRef(KiggEntityContainer.StoryMarkAsSpam, row(T1.[FK_StoryMarkAsSpam_User.StoryMarkAsSpam.StoryId], T1.[FK_StoryMarkAsSpam_User.StoryMarkAsSpam.UserId]),[Kigg.EF.DomainObjects].StoryMarkAsSpam) AS [FK_StoryMarkAsSpam_User.StoryMarkAsSpam], 
                T1.[FK_StoryMarkAsSpam_User.User.Id]
            FROM (
                SELECT 
                    T.UserId AS [FK_StoryMarkAsSpam_User.User.Id], 
                    T.StoryId AS [FK_StoryMarkAsSpam_User.StoryMarkAsSpam.StoryId], 
                    T.UserId AS [FK_StoryMarkAsSpam_User.StoryMarkAsSpam.UserId], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryMarkAsSpam AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                            }
                                                                                                                            else
                                                                                                                            {
                                                                                                                                if ((index == 29))
                                                                                                                                {
                                                                                                                                    // return view for KiggEntityContainer.FK_StoryVote_User
                                                                                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_StoryVote_User", @"
    SELECT VALUE -- Constructing FK_StoryVote_User
        [Kigg.EF.DomainObjects].FK_StoryVote_User(T3.[FK_StoryVote_User.User], T3.[FK_StoryVote_User.StoryVote])
    FROM (
        SELECT -- Constructing User
            CreateRef(KiggEntityContainer.UserDataSource, row(T2.[FK_StoryVote_User.User.Id]),[Kigg.EF.DomainObjects].User) AS [FK_StoryVote_User.User], 
            T2.[FK_StoryVote_User.StoryVote]
        FROM (
            SELECT -- Constructing StoryVote
                CreateRef(KiggEntityContainer.StoryVote, row(T1.[FK_StoryVote_User.StoryVote.StoryId], T1.[FK_StoryVote_User.StoryVote.UserId]),[Kigg.EF.DomainObjects].StoryVote) AS [FK_StoryVote_User.StoryVote], 
                T1.[FK_StoryVote_User.User.Id]
            FROM (
                SELECT 
                    T.UserId AS [FK_StoryVote_User.User.Id], 
                    T.StoryId AS [FK_StoryVote_User.StoryVote.StoryId], 
                    T.UserId AS [FK_StoryVote_User.StoryVote.UserId], 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryVote AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                                }
                                                                                                                                else
                                                                                                                                {
                                                                                                                                    if ((index == 30))
                                                                                                                                    {
                                                                                                                                        // return view for KiggEntityContainer.FK_UserScore_User
                                                                                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.FK_UserScore_User", @"
    SELECT VALUE -- Constructing FK_UserScore_User
        [Kigg.EF.DomainObjects].FK_UserScore_User(T3.[FK_UserScore_User.User], T3.[FK_UserScore_User.UserScore])
    FROM (
        SELECT -- Constructing User
            CreateRef(KiggEntityContainer.UserDataSource, row(T2.[FK_UserScore_User.User.Id]),[Kigg.EF.DomainObjects].User) AS [FK_UserScore_User.User], 
            T2.[FK_UserScore_User.UserScore]
        FROM (
            SELECT -- Constructing UserScore
                CreateRef(KiggEntityContainer.UserScore, row(T1.[FK_UserScore_User.UserScore.Id]),[Kigg.EF.DomainObjects].UserScore) AS [FK_UserScore_User.UserScore], 
                T1.[FK_UserScore_User.User.Id]
            FROM (
                SELECT 
                    T.UserId AS [FK_UserScore_User.User.Id], 
                    T.Id AS [FK_UserScore_User.UserScore.Id], 
                    True AS _from0
                FROM KiggStorageEntityContainer.UserScore AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                                    }
                                                                                                                                    else
                                                                                                                                    {
                                                                                                                                        if ((index == 31))
                                                                                                                                        {
                                                                                                                                            // return view for KiggEntityContainer.CommentSubscribtion
                                                                                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.CommentSubscribtion", @"
    SELECT VALUE -- Constructing CommentSubscribtion
        [Kigg.EF.DomainObjects].CommentSubscribtion(T3.CommentSubscribtion_Story, T3.CommentSubscribtion_User)
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.CommentSubscribtion_Story_Id),[Kigg.EF.DomainObjects].Story) AS CommentSubscribtion_Story, 
            T2.CommentSubscribtion_User
        FROM (
            SELECT -- Constructing User
                CreateRef(KiggEntityContainer.UserDataSource, row(T1.CommentSubscribtion_User_Id),[Kigg.EF.DomainObjects].User) AS CommentSubscribtion_User, 
                T1.CommentSubscribtion_Story_Id
            FROM (
                SELECT 
                    T.StoryId AS CommentSubscribtion_Story_Id, 
                    T.UserId AS CommentSubscribtion_User_Id, 
                    True AS _from0
                FROM KiggStorageEntityContainer.CommentSubscribtion AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                                        }
                                                                                                                                        else
                                                                                                                                        {
                                                                                                                                            if ((index == 32))
                                                                                                                                            {
                                                                                                                                                // return view for KiggEntityContainer.StoryTag
                                                                                                                                                return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.StoryTag", @"
    SELECT VALUE -- Constructing StoryTag
        [Kigg.EF.DomainObjects].StoryTag(T3.StoryTag_Story, T3.StoryTag_Tag)
    FROM (
        SELECT -- Constructing Story
            CreateRef(KiggEntityContainer.Story, row(T2.StoryTag_Story_Id),[Kigg.EF.DomainObjects].Story) AS StoryTag_Story, 
            T2.StoryTag_Tag
        FROM (
            SELECT -- Constructing Tag
                CreateRef(KiggEntityContainer.Tag, row(T1.StoryTag_Tag_Id),[Kigg.EF.DomainObjects].Tag) AS StoryTag_Tag, 
                T1.StoryTag_Story_Id
            FROM (
                SELECT 
                    T.StoryId AS StoryTag_Story_Id, 
                    T.TagId AS StoryTag_Tag_Id, 
                    True AS _from0
                FROM KiggStorageEntityContainer.StoryTag AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                                            }
                                                                                                                                            else
                                                                                                                                            {
                                                                                                                                                if ((index == 33))
                                                                                                                                                {
                                                                                                                                                    // return view for KiggEntityContainer.UserTag
                                                                                                                                                    return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.UserTag", @"
    SELECT VALUE -- Constructing UserTag
        [Kigg.EF.DomainObjects].UserTag(T3.UserTag_Tag, T3.UserTag_User)
    FROM (
        SELECT -- Constructing Tag
            CreateRef(KiggEntityContainer.Tag, row(T2.UserTag_Tag_Id),[Kigg.EF.DomainObjects].Tag) AS UserTag_Tag, 
            T2.UserTag_User
        FROM (
            SELECT -- Constructing User
                CreateRef(KiggEntityContainer.UserDataSource, row(T1.UserTag_User_Id),[Kigg.EF.DomainObjects].User) AS UserTag_User, 
                T1.UserTag_Tag_Id
            FROM (
                SELECT 
                    T.TagId AS UserTag_Tag_Id, 
                    T.UserId AS UserTag_User_Id, 
                    True AS _from0
                FROM KiggStorageEntityContainer.UserTag AS T
            ) AS T1
        ) AS T2
    ) AS T3");
                                                                                                                                                }
                                                                                                                                                else
                                                                                                                                                {
                                                                                                                                                    if ((index == 34))
                                                                                                                                                    {
                                                                                                                                                        // return view for KiggStorageEntityContainer.KnownSource
                                                                                                                                                        return new System.Collections.Generic.KeyValuePair<string, string>("KiggStorageEntityContainer.KnownSource", @"
    SELECT VALUE -- Constructing KnownSource
        [Kigg.EF.DomainObjects.Store].KnownSource(T1.KnownSource_Url, T1.KnownSource_Grade)
    FROM (
        SELECT 
            T.Url AS KnownSource_Url, 
            T.SourceGrade AS KnownSource_Grade, 
            True AS _from0
        FROM KiggEntityContainer.KnownSource AS T
    ) AS T1");
                                                                                                                                                    }
                                                                                                                                                    else
                                                                                                                                                    {
                                                                                                                                                        if ((index == 35))
                                                                                                                                                        {
                                                                                                                                                            // return view for KiggEntityContainer.KnownSource
                                                                                                                                                            return new System.Collections.Generic.KeyValuePair<string, string>("KiggEntityContainer.KnownSource", @"
    SELECT VALUE -- Constructing KnownSource
        [Kigg.EF.DomainObjects].KnownSource(T1.KnownSource_Url, T1.KnownSource_SourceGrade)
    FROM (
        SELECT 
            T.Url AS KnownSource_Url, 
            T.Grade AS KnownSource_SourceGrade, 
            True AS _from0
        FROM KiggStorageEntityContainer.KnownSource AS T
    ) AS T1");
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            throw new System.IndexOutOfRangeException();
        }
    }
}
