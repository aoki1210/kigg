<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration" requirePermission="false"/>
  </configSections>

  <connectionStrings>
    <clear/>
    <add name="KiGG" 
         connectionString="Data Source=.\sqlexpress;Initial Catalog=KiGG;Integrated Security=True;MultipleActiveResultSets=True" 
         providerName="System.Data.SqlClient"/>
  </connectionStrings>

  <unity>
    <typeAliases>
      <typeAlias alias="Singleton" type="Microsoft.Practices.Unity.ContainerControlledLifetimeManager, Microsoft.Practices.Unity"/>
      <typeAlias alias="IConfigurationSettings" type="Kigg.IConfigurationSettings, Kigg.Core"/>
      <typeAlias alias="ConfigurationSettings" type="Kigg.ConfigurationSettings, Kigg.Core"/>
      <typeAlias alias="IConfigurationManager" type="Kigg.Infrastructure.IConfigurationManager, Kigg.Core"/>
      <typeAlias alias="ConfigurationManager" type="Kigg.Infrastructure.ConfigurationManagerWrapper, Kigg.Core"/>
      <typeAlias alias="IDomainObjectFactory" type="Kigg.DomainObjects.IDomainObjectFactory, Kigg.Core"/>
      <typeAlias alias="DomainObjectFactory" type="Kigg.EF.DomainObjects.DomainObjectFactory, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IConnectionString" type="Kigg.EF.Repository.IConnectionString, Kigg.Infrastructure.EF"/>
      <typeAlias alias="ConnectionString" type="Kigg.EF.Repository.ConnectionString, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IDatabaseFactory" type="Kigg.EF.Repository.IDatabaseFactory, Kigg.Infrastructure.EF"/>
      <typeAlias alias="DatabaseFactory" type="Kigg.EF.Repository.DatabaseFactory, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IUnitOfWork" type="Kigg.Infrastructure.IUnitOfWork, Kigg.Core"/>
      <typeAlias alias="UnitOfWork" type="Kigg.EF.Repository.UnitOfWork, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IUserRepository" type="Kigg.Repository.IUserRepository, Kigg.Core"/>
      <typeAlias alias="UserRepository" type="Kigg.EF.Repository.UserRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="ICategoryRepository" type="Kigg.Repository.ICategoryRepository, Kigg.Core"/>
      <typeAlias alias="CategoryRepository" type="Kigg.EF.Repository.CategoryRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="ITagRepository" type="Kigg.Repository.ITagRepository, Kigg.Core"/>
      <typeAlias alias="TagRepository" type="Kigg.EF.Repository.TagRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IStoryRepository" type="Kigg.Repository.IStoryRepository, Kigg.Core"/>
      <typeAlias alias="StoryRepository" type="Kigg.EF.Repository.StoryRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IKnownSourceRepository" type="Kigg.Repository.IKnownSourceRepository, Kigg.Core"/>
      <typeAlias alias="KnownSourceRepository" type="Kigg.EF.Repository.KnownSourceRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="ICommentRepository" type="Kigg.Repository.ICommentRepository, Kigg.Core"/>
      <typeAlias alias="CommentRepository" type="Kigg.EF.Repository.CommentRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="ICommentSubscribtionRepository" type="Kigg.Repository.ICommentSubscribtionRepository, Kigg.Core"/>
      <typeAlias alias="CommentSubscribtionRepository" type="Kigg.EF.Repository.CommentSubscribtionRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IMarkAsSpamRepository" type="Kigg.Repository.IMarkAsSpamRepository, Kigg.Core"/>
      <typeAlias alias="MarkAsSpamRepository" type="Kigg.EF.Repository.MarkAsSpamRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IStoryViewRepository" type="Kigg.Repository.IStoryViewRepository, Kigg.Core"/>
      <typeAlias alias="StoryViewRepository" type="Kigg.EF.Repository.StoryViewRepository, Kigg.Infrastructure.EF"/>
      <typeAlias alias="IVoteRepository" type="Kigg.Repository.IVoteRepository, Kigg.Core"/>
      <typeAlias alias="VoteRepository" type="Kigg.EF.Repository.VoteRepository, Kigg.Infrastructure.EF"/>
      
    </typeAliases>
    <containers>
      <container>
        <types>
          <type type="IConfigurationManager" mapTo="ConfigurationManager">
            <lifetime type="Singleton"/>
          </type>          
          <type type="IDomainObjectFactory" mapTo="DomainObjectFactory">
            <lifetime type="Singleton"/>
          </type>
          <type type="IConnectionString" mapTo="ConnectionString">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="configuration" parameterType="IConfigurationManager">
                  <dependency/>
                </param>
                <param name="name" parameterType="System.String">
                  <value type="System.String" value="KiGGDatabase"/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IDatabaseFactory" mapTo="DatabaseFactory">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="connectionString" parameterType="ConnectionString">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IUnitOfWork" mapTo="UnitOfWork">
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="EF" type="IUserRepository" mapTo="UserRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="EF" type="ICategoryRepository" mapTo="CategoryRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type name="EF" type="ITagRepository" mapTo="TagRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>          
          <type name="EF" type="IStoryRepository" mapTo="StoryRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>          
          <type type="IKnownSourceRepository" mapTo="KnownSourceRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICommentRepository" mapTo="CommentRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="ICommentSubscribtionRepository" mapTo="CommentSubscribtionRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IMarkAsSpamRepository" mapTo="MarkAsSpamRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IStoryViewRepository" mapTo="StoryViewRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IVoteRepository" mapTo="VoteRepository">
            <lifetime type="Singleton"/>
            <typeConfig extensionType="Microsoft.Practices.Unity.Configuration.TypeInjectionElement, Microsoft.Practices.Unity.Configuration">
              <constructor>
                <param name="factory" parameterType="IDatabaseFactory">
                  <dependency/>
                </param>
              </constructor>
            </typeConfig>
          </type>
          <type type="IEventAggregator" mapTo="EventAggregator">
            <lifetime type="Singleton"/>
          </type>          
        </types>
      </container>
    </containers>
  </unity>
</configuration>